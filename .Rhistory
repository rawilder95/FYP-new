n_cvmat <- matrix(c(10, n_cv, n_cv, 15), 2, 2, byrow= TRUE)
(n_cvmat)
for(ii in 1:nvalues){
w_output<- mvtnorm::rmvnorm(nsubj,mu,cvm)
#this is where I had to stop
}
#Exercise 2
#Q1
#(a) Generate norm dist with μ= 5 and σ^2= 10
#(b) Compute sample mean and sample var
#(c) Repeat the previous steps 100,000 times, saving the value of t obtained in each iteration in a single vector object.
## Saved var 't' as nvalues because 't' is a function in R
xy_sim <- 100000
nsubj <- 10
nvalues <- vector("numeric",length=xy_sim)
for(ii in 1:xy_sim){
x <- rnorm(nsubj,5,sqrt(10))
nvalues[ii] <- (mean(x)-5)/sqrt(var(x)/nsubj)
}
#Question 2: Indicate proportion of instances where 'nvalues' was as extreme as 1, 2, or 3
(ext_1= mean(abs(nvalues) > 1))
(ext_2= mean(abs(nvalues) > 2))
(ext_3= mean(abs(nvalues) > 3))
(z_values= quantile(nvalues,c(0.025,0.005)))
#quantiles match the ones obtained with t-distribution with df=9
(qt_025= qt(0.025,df = 9))
(qt_005= qt(0.005,df = 9))
#Question 2: probability that delta is ≤ -1 U delta ≥ 1?
#My solution-- except that I just somehow did not think to use mean, rather sum/length... oops.  Still works.
p1= sum(abs(nvalues)>1)/length(nvalues)
p2= sum(abs(nvalues)>2)/length(nvalues)
(p1)
(p2)
#Your solution
p1= pnorm(-1, 0, sqrt(1.25))+(1-pnorm(1,0,sqrt(1.25)))
(p1)
p2= pnorm(-2,0,sqrt(1.25)) + (1-pnorm(2,0,sqrt(1.25)))
(p2)
for(ii in 1:nvalues){
w_output<- mvtnorm::rmvnorm(nsubj,mu,cvm)
nvalues[ii] <- mean(samp[,1]-samp[,2])
for(ii in 1:nvalues){
w_output<- mvtnorm::rmvnorm(nsubj,mu,cvm)
nvalues[ii] <- mean(samp[,1]-samp[,2])
}
#this is where I had to stop
kljdf;slkd
dkfjalk kdaj;dskfj
mean(abs(nvalues)>1)
mean(abs(nvalues)>2)
(15+10-2*n_cv)/20
#Exercise 2
#Q1
#(a) Generate norm dist with μ= 5 and σ^2= 10
#(b) Compute sample mean and sample var
#(c) Repeat the previous steps 100,000 times, saving the value of t obtained in each iteration in a single vector object.
## Saved var 't' as nvalues because 't' is a function in R
xy_sim <- 100000
nsubj <- 10
nvalues <- vector("numeric",length=xy_sim)
((15+10-2*n_cv)/20)
set.seed(100)
x <- rnorm(20, 3,10)
tt <- mean(x)/sqrt(var(x)/20)
tt
t.test(x)
#Exercise 3
#Q1
nsim <- 20000
FF <- vector("numeric",length=nsim)
for(jj in 1:nsim){
xa <- rnorm(50,100,sqrt(20))
xb <- rnorm(50,100,sqrt(20))
xc <- rnorm(50,100,sqrt(20))
i <- sum((xa-mean(xa))**2) + sum((xb-mean(xb))**2) +
sum((xc-mean(xc))**2)
ii <- sum((c(xa,xb,xc)-mean(c(xa,xb,xc)))**2)
FF[jj] <- ((ii-i)/2)/(i/147)
}
FF
quantile(FF, 1-c(0.05, 0.01, 0.005,0.001))
hist(FF,breaks= 100, probability= TRUE)
FF
#I wan't sure if we were supposed to preallocate these values, but it looks like that's what your answer key did!
quantile(FF, 1-c(0.05, 0.01, 0.005,0.001))
hist(FF,breaks = 100,probability = TRUE)
lines(seq(0,20,0.1),df(seq(0,20,0.1),2,147),col="red",lwd=2)
#hist(FF,breaks= 100, probability= TRUE)
FF
#I wan't sure if we were supposed to preallocate these values, but it looks like that's what your answer key did!
quantile(FF, 1-c(0.05, 0.01, 0.005,0.001))
hist(FF,breaks = 100,probability = TRUE)
lines(seq(0,20,0.1),df(seq(0,20,0.1),2,147),col="red",lwd=2)
FF
#I wan't sure if we were supposed to preallocate these values, but it looks like that's what your answer key did!
quantile(FF, 1-c(0.05, 0.01, 0.005,0.001))
lines(seq(0,20,0.1),df(seq(0,20,0.1),2,147),col="red",lwd=2)
hist(FF,breaks = 100,probability = TRUE)
lines(seq(0,20,0.1),df(seq(0,20,0.1),2,147),col="red",lwd=2)
#Q3
NN <- 20
nsim <- 50000
mdiff <- vector("numeric",length=nsim)
#Q5
set.seed(100)
x <- rnorm(20, 3,10)
tt <- mean(x)/sqrt(var(x)/20)
t.test(x)
#Q3
NN <- 20
nsim <- 50000
mdiff <- vector("numeric",length=nsim)
mu <- c(0,0)
rr <- 0.5
cc <- sqrt(10*15)*rr
cvm <- matrix(c(10, cc, cc, 15),2,2, byrow=TRUE)
for(ii in 1:nsim){
samp <- mvtnorm::rmvnorm(NN,mu,cvm)
mdiff[ii] <- mean(samp[,1]-samp[,2])
}
mean(mdiff)
var(mdiff)
mean(abs(mdiff) > 1)
mean(abs(mdiff) > 2)
nsubj= 20;
nvalues= 5000 #again I changed this to ensure that outputs look similar
n_mu <- c(0,0)
n_sigma <- 0.5
n_cv <- sqrt(10*15)*n_sigma
n_cvmat <- matrix(c(10, n_cv, n_cv, 15), 2, 2, byrow= TRUE)
(n_cvmat)
nsubj= 20;
nvalues= 5000
n_mu <- c(0,0)
n_sigma <- 0.5
n_cv <- sqrt(10*15)*n_sigma
n_cvmat <- matrix(c(10, n_cv, n_cv, 15), 2, 2, byrow= TRUE)
(n_cvmat)
for(ii in 1:nvalues){
w_output<- mvtnorm::rmvnorm(nsubj,mu,cvm)
nvalues[ii] <- mean(samp[,1]-samp[,2])
}
mean(nvalues)
var(nvalues)
mean(abs(nvalues)>1)
mean(abs(nvalues)>2)
nsubj= 20;
nvalues= 5000
n_mu <- c(0,0)
n_sigma <- 0.5
n_cv <- sqrt(10*15)*n_sigma
n_cvmat <- matrix(c(10, n_cv, n_cv, 15), 2, 2, byrow= TRUE)
(n_cvmat)
for(ii in 1:nvalues){
w_output<- mvtnorm::rmvnorm(nsubj,mu,cvm)
nvalues[ii] <- mean(samp[,1]-samp[,2])
}
mean(nvalues)
var(nvalues)
nvalues
#Q3
NN <- 20
nsim <- 50000
mdiff <- vector("numeric",length=nsim)
mu <- c(0,0)
rr <- 0.5
cc <- sqrt(10*15)*rr
cvm <- matrix(c(10, cc, cc, 15),2,2, byrow=TRUE)
for(ii in 1:nsim){
samp <- mvtnorm::rmvnorm(NN,mu,cvm)
mdiff[ii] <- mean(samp[,1]-samp[,2])
}
mean(mdiff)
var(mdiff)
mean(abs(mdiff) > 1)
mean(abs(mdiff) > 2)
#Q3
NN <- 20
nsim <- 50000
mdiff <- vector("numeric",length=nsim)
mu <- c(0,0)
rr <- 0.5
cc <- sqrt(10*15)*rr
cvm <- matrix(c(10, cc, cc, 15),2,2, byrow=TRUE)
for(ii in 1:nsim){
samp <- mvtnorm::rmvnorm(NN,mu,cvm)
mdiff[ii] <- mean(samp[,1]-samp[,2])
}
mean(mdiff)
var(mdiff)
mean(abs(mdiff) > 1)
mean(abs(mdiff) > 2)
#Q3
NN <- 20
nsim <- 50000
mdiff <- vector("numeric",length=nsim)
# set up mu vector and covariance matrix
mu <- c(0,0)
rr <- 0.5
cc <- sqrt(10*15)*rr
cvm <- matrix(c(10, cc, cc, 15),2,2, byrow=TRUE)
cvm <- matrix(c(10, cc, cc, 15),2,2, byrow=TRUE)
for(ii in 1:nsim){
samp <- mvtnorm::rmvnorm(NN,mu,cvm)
mdiff[ii] <- mean(samp[,1]-samp[,2])
}
mean(mdiff)
var(mdiff)
mean(abs(mdiff) > 1)
mean(abs(mdiff) > 2)
#Q3
#I had been using other variable names, but decided to change them to make edits less confusing
NN <- 20
nsim <- 50000
mdiff <- vector("numeric",length=nsim)
# set up mu vector and covariance matrix
mu <- c(0,0)
rr <- 0.5
cc <- sqrt(10*15)*rr
cvm <- matrix(c(10, cc, cc, 15),2,2, byrow=TRUE)
(z_values= quantile(nvalues,c(0.025,0.005)))
hist(z_values)
#quantiles match the ones obtained with t-distribution with df=9
(qt_025= qt(0.025,df = 9))
(qt_005= qt(0.005,df = 9))
zvalues
z_values
#Q3
nsubj <- 0
xy_sim <- 5000 #originally xysim had a different value but I changed it since the outputs were off.
nvalues <- vector("numeric", length=xy_sim)
for(ii in 1:xy_sim){
x <- rnorm(nsubj,0,sqrt(10))
y <- rnorm(nsubj,0,sqrt(15))
nvalues[ii] <- mean(x)-mean(y)
}
(mean(nvalues))
(var(nvalues))
#I had been using other variable names, but decided to change them to make edits less confusing
NN <- 20
nsim <- 50000
mdiff <- vector("numeric",length=nsim)
# set up mu vector and covariance matrix
mu <- c(0,0)
rr <- 0.5
cc <- sqrt(10*15)*rr
cvm <- matrix(c(10, cc, cc, 15),2,2, byrow=TRUE)
x <- rnorm(nsubj,0,sqrt(10))
y <- rnorm(nsubj,0,sqrt(15))
nvalues[ii] <- mean(x)-mean(y)
}
(mean(nvalues))
(var(nvalues))
hist(mean(navlues))
x <- rnorm(nsubj,0,sqrt(10))
y <- rnorm(nsubj,0,sqrt(15))
nvalues[ii] <- mean(x)-mean(y)
}
(mean(nvalues))
(var(nvalues))
hist(mean(nvalues))
x <- rnorm(nsubj,0,sqrt(10))
y <- rnorm(nsubj,0,sqrt(15))
nvalues[ii] <- mean(x)-mean(y)
}
(mean(nvalues))
(var(nvalues))
hist(nvalues)
nvalues
nvalues <- vector("numeric", length=xy_sim)
for(ii in 1:xy_sim){
x <- rnorm(nsubj,0,sqrt(10))
y <- rnorm(nsubj,0,sqrt(15))
nvalues[ii] <- mean(x)-mean(y)
}
(mean(nvalues))
(var(nvalues))
hist(nvalues)
nvalues
#I had been using other variable names, but decided to change them to make edits less confusing
NN <- 20
nsim <- 50000
mdiff <- vector("numeric",length=nsim)
# set up mu vector and covariance matrix
mu <- c(0,0)
rr <- 0.5
cc <- sqrt(10*15)*rr
cvm <- matrix(c(10, cc, cc, 15),2,2, byrow=TRUE)
x
#Q3
nsubj <- 0
xy_sim <- 50000
nvalues <- vector("numeric", length=xy_sim)
for(ii in 1:xy_sim){
x <- rnorm(nsubj,0,sqrt(10))
y <- rnorm(nsubj,0,sqrt(15))
nvalues[ii] <- mean(x)-mean(y)
}
(mean(nvalues))
(var(nvalues))
hist(nvalues)
x <- rnorm(nsubj,0,sqrt(10))
y <- rnorm(nsubj,0,sqrt(15))
nvalues[ii] <- mean(x)-mean(y)
}
(mean(nvalues))
hist(var(nvalues))
hist(nvalues)
x <- rnorm(nsubj,0,sqrt(10))
y <- rnorm(nsubj,0,sqrt(15))
nvalues[ii] <- mean(x)-mean(y)
}
hist(nvalues,breaks = 100,probability = TRUE)
lines(seq(0,20,0.1),df(seq(0,20,0.1),2,147),col="red",lwd=2)
x <- rnorm(nsubj,0,sqrt(10))
y <- rnorm(nsubj,0,sqrt(15))
nvalues[ii] <- mean(x)-mean(y)
}
hist(nvalues,breaks = 100,probability = TRUE)
lines(seq(0,20,0.1),df(seq(0,20,0.1),2,147),col="red",lwd=2)
#Q3
nsubj <- 20
xy_sim <- 50000
nvalues <- vector("numeric", length=xy_sim)
for(ii in 1:xy_sim){
x <- rnorm(nsubj,0,sqrt(10))
y <- rnorm(nsubj,0,sqrt(15))
nvalues[ii] <- mean(x)-mean(y)
}
hist(nvalues,breaks = 100,probability = TRUE)
lines(seq(0,20,0.1),df(seq(0,20,0.1),2,147),col="red",lwd=2)
x <- rnorm(nsubj,0,sqrt(10))
y <- rnorm(nsubj,0,sqrt(15))
nvalues[ii] <- mean(x)-mean(y)
}
hist(nvalues,breaks = 100,probability = TRUE)
lines(seq(0,20,0.1),df(seq(0,20,0.1),2,147))
x <- rnorm(nsubj,0,sqrt(10))
y <- rnorm(nsubj,0,sqrt(15))
nvalues[ii] <- mean(x)-mean(y)
hist(nvalues,breaks = 100,probability = TRUE)
lines(seq(0,20,0.1),df(seq(0,20,0.1),2,147))
hist(nvalues,breaks = 100,probability = TRUE)
nsubj <- 100
xy_sim <- 50000
nvalues <- vector("numeric", length=xy_sim)
for(ii in 1:xy_sim){
x <- rnorm(nsubj,0,sqrt(10))
y <- rnorm(nsubj,0,sqrt(15))
nvalues[ii] <- mean(x)-mean(y)
hist(nvalues,breaks = 100,probability = TRUE)
nsubj <- 100
xy_sim <- 50000
nvalues <- vector("numeric", length=xy_sim)
for(ii in 1:xy_sim){
x <- rnorm(nsubj,0,sqrt(10))
y <- rnorm(nsubj,0,sqrt(15))
nvalues[ii] <- mean(x)-mean(y)
}hist(nvalues,breaks = 100,probability = TRUE)
x <- rnorm(nsubj,0,sqrt(10))
y <- rnorm(nsubj,0,sqrt(15))
nvalues[ii] <- mean(x)-mean(y)
}
hist(nvalues,breaks = 100,probability = TRUE)
nvalues <- vector("numeric", length=xy_sim)
for(ii in 1:xy_sim){
x <- rnorm(nsubj,0,sqrt(10))
y <- rnorm(nsubj,0,sqrt(15))
nvalues[ii] <- mean(x)-mean(y)
}
hist(nvalues,breaks = 100,probability = TRUE)
x <- rnorm(nsubj,0,sqrt(10))
y <- rnorm(nsubj,0,sqrt(15))
nvalues[ii] <- mean(x)-mean(y)
}
hist(nvalues,breaks = 1000,probability = TRUE)
x <- rnorm(nsubj,0,sqrt(10))
y <- rnorm(nsubj,0,sqrt(15))
nvalues[ii] <- mean(x)-mean(y)
}
hist(nvalues,breaks = 150,probability = TRUE)
nsubj <- 1000
xy_sim <- 50000
nvalues <- vector("numeric", length=xy_sim)
for(ii in 1:xy_sim){
x <- rnorm(nsubj,0,sqrt(10))
y <- rnorm(nsubj,0,sqrt(15))
nvalues[ii] <- mean(x)-mean(y)
}
hist(nvalues,breaks = 150,probability = TRUE)
nsubj <- 20
xy_sim <- 50000
nvalues <- vector("numeric", length=xy_sim)
for(ii in 1:xy_sim){
x <- rnorm(nsubj,0,sqrt(10))
y <- rnorm(nsubj,0,sqrt(15))
nvalues[ii] <- mean(x)-mean(y)
}
hist(nvalues,breaks = 100,probability = TRUE)
nsubj <- 20
xy_sim <- 50000
nvalues <- vector("numeric", length=xy_sim)
for(ii in 1:xy_sim){
x <- rnorm(nsubj,0,sqrt(10))
y <- rnorm(nsubj,0,sqrt(15))
nvalues[ii] <- mean(x)-mean(y)
}
hist(nvalues,breaks = 100,probability = TRUE)
nsubj <- 100
xy_sim <- 50000
nvalues <- vector("numeric", length=xy_sim)
for(ii in 1:xy_sim){
x <- rnorm(nsubj,0,sqrt(10))
y <- rnorm(nsubj,0,sqrt(15))
nvalues[ii] <- mean(x)-mean(y)
}
hist(nvalues,breaks = 150,probability = TRUE)
nsubj <- 1000
xy_sim <- 50000
nvalues <- vector("numeric", length=xy_sim)
for(ii in 1:xy_sim){
x <- rnorm(nsubj,0,sqrt(10))
y <- rnorm(nsubj,0,sqrt(15))
nvalues[ii] <- mean(x)-mean(y)
}
hist(nvalues,breaks = 150,probability = TRUE)
#Q3
A <- rnorm(20, 98, 10)
B <- rnorm(20, 96, 10)
C <- rnorm(20, 100, 10)
m1 <- sum((A-mean(A))**2) + sum((B-mean(B))**2) + sum((C-mean(C))**2)
m2 <- sum((c(A,B,C)-mean(c(A,B,C)))**2)
Fscore <- ((m2-m1)/2)/(m1/57)
#Q3
A <- rnorm(20, 98, 10)
B <- rnorm(20, 96, 10)
C <- rnorm(20, 100, 10)
m1 <- sum((A-mean(A))**2) + sum((B-mean(B))**2) + sum((C-mean(C))**2)
m2 <- sum((c(A,B,C)-mean(c(A,B,C)))**2)
Fscore <- ((m2-m1)/2)/(m1/57)
dat <- data.frame(id,group=rep(LETTERS[1:3],each=20),score=c(A,B,C))
afex::aov_ez("id","score",data = dat,between = "group")
dat <- data.frame(id,group=rep(LETTERS[1:3],each=20),score=c(A,B,C))
afex::aov_ez("id","score",data = dat,between = "group")
#Q3
A <- rnorm(20, 98, 10)
B <- rnorm(20, 96, 10)
C <- rnorm(20, 100, 10)
m1 <- sum((A-mean(A))**2) + sum((B-mean(B))**2) + sum((C-mean(C))**2)
m2 <- sum((c(A,B,C)-mean(c(A,B,C)))**2)
Fscore <- ((m2-m1)/2)/(m1/57)
install("afex")
dat <- data.frame(id,group=rep(LETTERS[1:3],each=20),score=c(A,B,C))
afex::aov_ez("id","score",data = dat,between = "group")
#Q3
A <- rnorm(20, 98, 10)
B <- rnorm(20, 96, 10)
C <- rnorm(20, 100, 10)
m1 <- sum((A-mean(A))**2) + sum((B-mean(B))**2) + sum((C-mean(C))**2)
m2 <- sum((c(A,B,C)-mean(c(A,B,C)))**2)
Fscore <- ((m2-m1)/2)/(m1/57)
install("afex")
dat <- data.frame(id,group=rep(LETTERS[1:3],each=20),score=c(A,B,C))
afex::aov_ez("id","score",data = dat,between = "group")
(ffr_rt <- ggplot()+
geom_histogram(aes(x= rtc), color= "magenta", fill= "grey", bins= 40)+
labs(title= "Response Time", subtitle= "Reflecting Items That were FFR", x= "Response Time"))
library("cowplot")
cowplot::plot_grid(ifr_list, ffr_list, ifr_sp, ffr_sp, ifr_op, ffr_op)
d
2+4
my_data
# install.packages("lme4", type= "binary")
# defaultW <- getOption("warn")
# options(warn = -1)
library(lme4)
library(MuMIn)
# install.packages("data.table")
library("ggplot2")
library("data.table")
# install.packages("lmerTest")
library(lmerTest)
# Load Data & Set up Data Table
########################################################
dir <- getwd()
target_dir <- "/Users/rebeccawilder/FYP-new"
setwd(target_dir)
my_data <- read.csv(file= "recognition_mat_7212021.csv")
my_data <- data.table(my_data)
data_names <- c("subject", "session", "sp", "op", "list", "lag", "recognized")
colnames(my_data) <- data_names
my_data[,sp2:= sp^2]
my_data[, list2:= list^2]
my_data[, op2:= op^2]
my_data[, lag2:= lag^2]
my_data[, recog:= recognized==1]
my_data$recog[my_data$recog== "TRUE"] <- paste("YES")
my_data$recog[my_data$recog== "FALSE"] <- paste("NO")
####### Final Recognition #############
# Model OP and List
list_op <- glmer(data= my_data, formula= recognized ~ op + op2+ list+ list2+ (1|subject)+ (1|session), family= "binomial")
####### Final Recognition #############
# Model OP and List
list_op <- glmer(data= my_data, formula= recognized ~ op + op2+ list+ list2+ (1|subject)+ (1|session), family= "binomial")
summary(list_op)
r.squaredGLMM(list_op)
my_data[, flist_op:= fitted(list_op)]
# Plot OP and List
ggplot(data= my_data, aes(x= recog, y= flist_op))+ geom_jitter(height= 0, width= 0.4, alpha= 0.2, color= "hot pink")+ ylim(0.5, 1)+ labs(title= "List, OP, & Quadratic Terms", x=("Was it Recognized?"), y= "Fitted Values")+ geom_violin(alpha= 0.5, draw_quantiles = mean(my_data$flist_op), trim= TRUE)
ggsave("recog_list_op", device= "png", dpi= 300)
summary(list_op)
r.squaredGLMM(list_op)
